{"version":3,"sources":["components/Navbar/Navbar.js","components/Jumbotron/Jumbotron.js","components/Starred/Starred.js","components/Results/Results.js","util/API.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","id","onClick","toggleStarred","onChange","handleInputChange","type","name","placeholder","handleFormSubmit","Jumbotron","Starred","starred","books","length","map","book","key","_id","data-id","title","handleDeleteBook","class","authors","author","src","thumbnail","avgRating","longDesc","publisher","publishedDate","pageCount","Results","_ref","items","hasError","handleSave","saved","role","volumeInfo","imageLinks","smallThumbnail","searchInfo","textSnippet","canonicalVolumeLink","data-key","API","getBooks","axios","get","deleteBook","console","log","delete","saveBook","bookid","post","App","state","searchTerm","showStarred","starredBooks","fetchData","formatedSearch","_this","split","join","fetch","concat","then","res","json","response","setState","catch","err","e","preventDefault","handleSaveBook","currentTarget","dataset","value","data","Navbar_Navbar","this","Jumbotron_Jumbotron","Results_Results","Starred_Starred","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e91f21a.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Navbar(props){\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n        <a className=\"navbar-brand\" href=\"\">\n          Google Books Search\n        </a>\n        <div\n          className=\"collapse navbar-collapse\"\n          id=\"navbarSupportedContent\"\n        >\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <a onClick={props.toggleStarred}className=\"nav-link\" href=\"#\">\n                <i className=\"fas fa-star\" />\n                <span className=\"ml-1\">Starred</span>\n              </a>\n            </li>\n          </ul>\n          <div className=\"d-flex float-right h-100\">\n            <div className=\"searchbar\">\n              \n                <input\n                  onChange={props.handleInputChange}\n                  className=\"search_input\"\n                  type=\"text\"\n                  name=\"\"\n                  placeholder=\"Search...\"\n                />\n                <a\n                  href=\"\"\n                  onClick={props.handleFormSubmit}\n                  className=\"search_icon\"\n                >\n                  <i className=\"fas fa-search\" />\n                </a>\n              \n            </div>\n          </div>\n        </div>\n      </nav>\n    );\n}\n\nexport default Navbar;","import React from 'react';\n\nfunction Jumbotron(){\n    return (\n      <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n          <h1 className=\"display-4\">Google Book Search</h1>\n          <p className=\"lead\">\n            Search and save books!\n          </p>\n        </div>\n      </div>\n    );\n}\n\nexport default Jumbotron;","import React from \"react\";\n\nfunction Starred(props){\n  if(!props.starred){\n    return null\n  }\n  if (props.books.length <= 0) {\n    return (\n      <div className=\"container\">\n        <h5>No books saved.</h5>\n      </div>\n    );\n  }\n\n    return (\n      <div className=\"container\">\n        {props.books.map(book => (\n          <div\n            className=\"card mb-4 border-primary\"\n            key={book._id}\n            data-id={book._id}\n          >\n            <h5 className=\"card-header text-left bg-primary text-white\">\n              {book.title}\n\n              <a\n                href=\"\"\n                className=\"float-right text-white\"\n                onClick={props.handleDeleteBook}\n                data-id={book._id}\n              >\n                <i class=\"fas fa-trash-alt\" />\n              </a>\n            </h5>\n\n            <div className=\"card-body\">\n              <div className=\"row\">\n                <div className=\"col-2\">\n                  <p className=\"author\">\n                    Author(s):\n                    {book.authors.map(author => (\n                      <p className=\"authors-loop\">{author}</p>\n                    ))}\n                  </p>\n                  <img src={book.thumbnail} className=\"book-image\" />\n                  <p className=\"mt-4 rating\">\n                    User Rating: {book.avgRating}\n                  </p>\n                </div>\n                <div className=\"col-10 text-left\">\n                  <h5 className=\"card-title\">Description:</h5>\n                  {book.longDesc}\n                  <hr />\n                  <h5 className=\"mt-4 card-title\">Book Info:</h5>\n\n                  <p className=\"book-info\">Publisher: {book.publisher}</p>\n                  <p className=\"book-info\">\n                    Published Date: {book.publishedDate}\n                  </p>\n                  <p className=\"book-info\">Page Count: {book.pageCount}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n    \n}\n\nexport default Starred;","import React from 'react';\n\nfunction Results ({items, hasError, starred, handleSave, saved}){\n    if(items && !starred){\n    return (\n        \n      <div className=\"container id=top\">\n          {saved ? <div className=\"alert alert-success\"     role=\"alert\">\n            Book Saved!\n        </div> : \"\"}\n          \n        {items.map(items => (\n          <div\n            key={items.id}\n            className=\"card text-left mb-4 border-primary\"\n          >\n            <h5 className=\"card-header\">{items.volumeInfo.title}</h5>\n            <div className=\"card-body\">\n              <div className=\"row\">\n                <div className=\"col-2\">\n                  <p className=\"author\">\n                    Author(s):\n                    {items.volumeInfo.authors.map(author => (\n                      <p className=\"authors-loop\">{author}</p>\n                    ))}\n                  </p>\n                  <img\n                    className=\"book-image\"\n                    src={items.volumeInfo.imageLinks.smallThumbnail}\n                  />\n                </div>\n                <div className=\"col-10 text-left\">\n                  <p className=\"card-text\">\n                    {\n                      (items.searchInfo.textSnippet = undefined\n                        ? \"No Description ar this time.\"\n                        : items.searchInfo.textSnippet)\n                    }\n                  </p>\n                  <a\n                    href={items.volumeInfo.canonicalVolumeLink}\n                    className=\"btn btn-primary\"\n                  >\n                    Go to Book\n                  </a>\n                  <a\n                    onClick={handleSave}\n                    data-key={items.id}\n                    className=\"ml-2 btn btn-success\"\n                    href=\"#top\"\n                  >\n                    Save Book\n                  </a>\n                </div>\n              </div>\n              <div className=\"row\">\n                {/* <div className=\"col-2 mt-2 ml-2\">\n                 return ({for (var i = 0; i < items.volumeInfo.averageRating; i++){<i className=\"fas fa-star text-primary\" /> }})\n\n                </div> */}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );}\n    if(starred){\n        return null;\n    }\n\n    if(hasError){\n\n        return(\n        <div className=\"container\">\n            <h1>Please search a book.</h1>\n        </div>)\n    }else{\n        return (\n        <div className=\"container\">\n            <h1>Please search a book.</h1>\n        </div>\n\n        )\n    }\n\n}\n\nexport default Results\n\n","import axios from \"axios\";\n\nexport default {\n  // Gets all books\n  getBooks: function() {\n    return axios.get(\"/api/books\");\n  },\n  // Deletes the book with the given id\n  deleteBook: function(id) {\n      console.log(id);\n    return axios.delete(\"/api/books/\" + id);\n  },\n  // Saves a book to the database\n  saveBook: function(bookid) {\n    return axios.post(\"/api/books/\" + bookid);\n  }\n};\n","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport Jumbotron from './components/Jumbotron/Jumbotron';\nimport Starred from './components/Starred/Starred';\nimport Results from './components/Results/Results'\nimport API from './util/API';\n\nclass App extends React.Component {\n  state = {\n    items: [],\n    searchTerm: \"\",\n    saved: false,\n    showStarred: false,\n    starredBooks: [],\n  };\n\n  componentDidMount() {}\n\n  fetchData = () => {\n   \n    let formatedSearch = this.state.searchTerm.split(\" \").join(\"+\");\n    fetch(`https://www.googleapis.com/books/v1/volumes?q=${formatedSearch}`)\n      .then(res => res.json())\n      .then(response => this.setState({ items: response.items }))\n      .catch(err => {\n        \n      });\n  };\n\n  handleFormSubmit = e => {\n    e.preventDefault();\n   this.setState(\n     { showStarred: false },\n      this.fetchData())\n    \n  };\n \n  handleSaveBook = e => {\n    API.saveBook(e.currentTarget.dataset.key)\n    .then(this.setState({saved: true}))\n    .catch(err => console.log(err));\n  }\n\n  handleDeleteBook = e =>{\n    e.preventDefault();\n    API.deleteBook(e.currentTarget.dataset.id)\n    .then(res=>{this.toggleStarred()})\n    .then(res=>{this.toggleStarred()})\n\n  }\n\n  handleInputChange = e => {\n    this.setState({searchTerm: e.currentTarget.value})\n  };\n\n  toggleStarred = ()=>{\n    API.getBooks()\n    .then(response =>{\n      \n      this.setState(\n        { showStarred: !this.state.showStarred,\n        starredBooks : response.data })\n      \n    })\n    \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar\n          handleFormSubmit={this.handleFormSubmit}\n          handleInputChange={this.handleInputChange}\n          toggleStarred={this.toggleStarred}\n        />\n        <Jumbotron />\n        <Results\n          items={this.state.items}\n          saved={this.state.saved}\n          starred={this.state.showStarred}\n          handleSave={this.handleSaveBook}\n        />\n        <Starred\n          starred={this.state.showStarred}\n          books={this.state.starredBooks}\n          handleDeleteBook={this.handleDeleteBook}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}